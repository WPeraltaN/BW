
const { autocomplete, getAlgoliaResults } = window[
	"@algolia/autocomplete-js"
];
const { createQuerySuggestionsPlugin } = window[
    "@algolia/autocomplete-plugin-query-suggestions"
];

const { createLocalStorageRecentSearchesPlugin } = window[
    "@algolia/autocomplete-plugin-recent-searches"
];

const searchPagePath = $('#searchform').attr("action"),
    queryKey = 'searchQuery',
    isSearchResultsPage = window.location.pathname == searchPagePath;

var instantSearchResultsCmp = $(".instant-search-results-cmp"),
    isSearchResultsComponentExist = instantSearchResultsCmp && instantSearchResultsCmp.length > 0,
	searchAsYouType = false;

window.adobeDataLayer = window.adobeDataLayer || [];

$(document).ready(function () {


    $(document).on('click','.retry-search',function(e) {

        var $parent = $('.mobile-search');

        if ($parent.hasClass('active')) {
            //$parent.removeClass('active')
            $('.search-form.nav-js').find('input').focus();
        } else {
            $parent.addClass('active');
            $('.search-form.nav-js').find('input').focus();
        }

        e.preventDefault();

    });
});
/*
  These are facet widgets that act upon a record's attribute,
  such as refinementList, ratingMenu, menu, rangeInput
  .
*/
const ATTRIBUTE_ORIENTED_WIDGETS = ['refinementList', 'ratingMenu'];

/*
  This mapping defines how the route, such as /?brand=York&brand=Kisses
  maps to:
  {
    refinementList: {
      bmetaTags.brand: ['York', 'Kisses']
    }
  }

  if the attribute is an array, set isArray:true
  if the attribute can contain special characters, such as &, set encode: true
  if the attribute should be remove from the querystring if it's empty, set removeIf:[undefined]
*/
const ROUTE_MAPPING = {
  refinementList: {
      //brand refinements
      brand: {
          key: 'metaTags.brand',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      marcas: {
          key: 'metaTags.marcas',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      marca: {
          key: 'metaTags.marca',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      marque: {
          key: 'metaTags.marque',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      //sub-brand
      subBrand: {
          key: 'metaTags.subBrand',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      subMarca: {
          key: 'metaTags.subMarca',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      //occasions
      occasion: {
          key: 'metaTags.occasion',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      //occasions
      occasions: {
          key: 'metaTags.Holidays & Celebrations',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      gifting: {
          key: 'metaTags.Festive & Gifting',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      articleTypeName: {
          key: 'metaTags.articleTypeName',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      category: {
          key: 'metaTags.category',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      recipeCategory: {
          key: 'metaTags.recipeCategory',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      dietaryNeeds: {
          key: 'metaTags.dietaryNeeds',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      flavor: {
          key: 'metaTags.flavor',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      label: {
          key: 'metaTags.label',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      packSize: {
          key: 'metaTags.packSize',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      packType: {
          key: 'metaTags.packType',
          isArray: true,
         // encode: true,
          removeIf: [undefined],
      },
      partySnacks: {
          key: 'metaTags.partySnacks',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      flavors: {
        key: 'metaTags.Flavors & Ingredients',
        isArray: true,
        //encode: true,
        removeIf: [undefined],
    },
    "time+to+make": {
      key: 'metaTags.Time to Complete',
      isArray: true,
      //encode: true,
      removeIf: [undefined],
   },
      season: {
          key: 'metaTags.season',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      seasons: {
          key: 'metaTags.Seasons & Occasions',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      materials: {
          key: 'metaTags.Materials',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      besoinsNutritionnels: {
          key: 'metaTags.besoinsNutritionnels',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      catégorie: {
          key: 'metaTags.catégorie',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      formatDuProduit: {
          key: 'metaTags.formatDuProduit',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      fêteEtCélébrations: {
          key: 'metaTags.fêteEtCélébrations',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      saison: {
          key: 'metaTags.saison',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      "Total+Time": {
         key: 'metaTags.totalTime',
         isArray: true,
         //encode: true,
         removeIf: [undefined],
      },
      tempsTotal: {
          key: 'metaTags.tempsTotal',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      étiquettes: {
          key: 'metaTags.étiquettes',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      tempoTotal: {
          key: 'metaTags.tempoTotal',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      tiempoTotal: {
          key: 'metaTags.tiempoTotal',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      categoría: {
          key: 'metaTags.categoría',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      feriadosECelebrações: {
          key: 'metaTags.Feriados & Celebrações',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      rótulo: {
          key: 'metaTags.rótulo',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      sabor: {
          key: 'metaTags.sabor',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      estación: {
          key: 'metaTags.estación',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      etiqueta: {
          key: 'metaTags.etiqueta',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      temporadasYCelebraciones: {
          key: 'metaTags.Temporadas & Celebraciones',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      tamaño: {
          key: 'metaTags.tamaño',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      recetasCategoría: {
          key: 'metaTags.recetasCategoría',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      saborPrincipal: {
          key: 'metaTags.saborPrincipal',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },

      necesidadesNutricionales: {
          key: 'metaTags.necesidadesNutricionales',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
      "skill-level": {
          key: 'hero.skill',
          isArray: true,
          //encode: true,
          removeIf: [undefined],
      },
	  "NiveauDHabileté": {
			key: 'hero.niveauDHabileté',
			isArray: true,
			//encode: true,
			removeIf: [undefined],
		},
    skill: {
        key: 'metaTags.skill-level',
        isArray: true,
        //encode: true,
        removeIf: [undefined],
    },
    "Skill+Level": {
        key: 'metaTags.skillLevel',
        isArray: true,
        //encode: true,
        removeIf: [undefined],
    },
	  "NívelDeHabilidade": {
             key: 'hero.nívelDeHabilidade',
             isArray: true,
             //encode: true,
             removeIf: [undefined],
	 },
	 "NivelDeHabilidad": {
            key: 'hero.nivelDeHabilidad',
            isArray: true,
            //encode: true,
            removeIf: [undefined],
     },
  },
  ratingMenu: {
      rating: {
          key: 'hero.rating',
          isArray: false,
          encode: true,
          removeIf: [undefined],
      },
  },
  page: { encode: false, removeIf: [undefined, '0', '1'] },
  query: { encode: true, removeIf: [undefined, ''] },
  sortBy: { encode: false, removeIf: [undefined, ''] },
      selected: {encode: false},
};

function shouldRemove(descriptor, state) {
  if (!descriptor || !descriptor.removeIf || descriptor.removeIf.length === 0) {
    return false;
  }

  return descriptor.removeIf.includes(state);
}

/*
  The internal ui state -> URL
*/
function getStateToRoute(uiState) {
  const result = {};

  for (let topKey of Object.keys(uiState)) {
    if (topKey in ROUTE_MAPPING) {
      const topMatch = ROUTE_MAPPING[topKey];

      if (ATTRIBUTE_ORIENTED_WIDGETS.includes(topKey)) {
        for (let mappingKey of Object.keys(topMatch)) {
          const descriptor = topMatch[mappingKey];
          const value = uiState[topKey][descriptor.key];

          if (value) {
            result[mappingKey] = descriptor.encode
              ? encodeURIComponent(value)
              : value;
          }
        }
      } else {
        result[topKey] = uiState[topKey];
      }
    }
  }

  return result;
}

/*
  The URL to internal UI state.
*/
function getRouteToState(routeState) {
  const result = {};

  for (let topKey of Object.keys(routeState)) {
    const topValue = routeState[topKey];

    if (topKey in ROUTE_MAPPING) {
      const topMatch = ROUTE_MAPPING[topKey];

      if (!shouldRemove(topMatch, topValue)) {
        result[topKey] = topValue;
      }
    } else {
      // A top level mapping does not exist, so check refinementList, etc.
      for (let widgetType of ATTRIBUTE_ORIENTED_WIDGETS) {
        const widgetMatch = ROUTE_MAPPING[widgetType];

        for (let mappingKey of Object.keys(widgetMatch)) {
          const descriptor = widgetMatch[mappingKey];
          const target = descriptor.key;
          const value = routeState[mappingKey];

          if (!target) continue;

          if (!result[widgetType]) {
            result[widgetType] = {};
          }

          if (!result[widgetType][mappingKey]) {
            if (!shouldRemove(descriptor, value)) {
              if (descriptor.isArray && !Array.isArray(value)) {
                result[widgetType][target] = [
                  descriptor.encode ? decodeURIComponent(value) : value,
                ];
              } else {
                result[widgetType][target] = value.map((item) => {
                  return descriptor.encode ? decodeURIComponent(item) : item;
                });
              }
            }
          }
        }
      }
    }
  }

  return result;
}

const router = instantsearch.routers.history({
  createURL({ qsModule, routeState, location }) {
    const urlParts = location.href.match(/^(.*?)\//);
    //const baseUrl = `${urlParts ? urlParts[1] : ''}/`;
    const baseUrl = `${urlParts ? urlParts[1] : ''}`;

    const url = location.href.replace(/#[^#]+$/, "").replace(/\?[^\?]+$/, "").replace(/\/$/, "");
    const baseURL = url.substr(url.lastIndexOf("/") + 1);

    //console.log(urlParts +  " | baseurl " + baseUrl);

	const queryParameters = { ...routeState };

    if (routeState.query) {
      queryParameters.searchQuery = encodeURIComponent(routeState.query);
     delete queryParameters['query'];
    }

	if (routeState.page !== 1) {
      queryParameters.page = routeState.page;
    }

    if (routeState.sortBy) {
          queryParameters.sortBy = routeState.sortBy;
        }



    const queryString = qsModule.stringify(queryParameters, {
      addQueryPrefix: true,
      arrayFormat: 'repeat',
    });

    return `${baseURL}${queryString}`;
  },

  parseURL({ qsModule, location }) {
    const { searchQuery = '', page,sortBy,...rest } = qsModule.parse(
      location.search.slice(1)
    );

    const result = {
      ...rest,
      query: decodeURIComponent(searchQuery),
      sortBy,
      page,
    };

    return result;
  },
});

const stateMapping = {
  stateToRoute(uiState) {
    return {
      ...getStateToRoute(uiState[INDEX_NAME]),
    };
  },

  routeToState(routeState) {
    return {
      [INDEX_NAME]: {
        ...getRouteToState(routeState),
      },
    };
  },
};

const searchRouting = {
  router,
  stateMapping,
};

function getSearchRouting (searchAsYouType){
  console.log('isSearchResultsComponentExist: ', isSearchResultsComponentExist);
  console.log('searchAsYouType: ', searchAsYouType);
  var searchRouting = false;
  if (isSearchResultsComponentExist && searchAsYouType) {
      //
  }
  return searchRouting;
}
function getInstantSearchDialogValues() {
	var dialogValues = $("#searchCreationJson").val();
	if (!dialogValues) {
		dialogValues = "{}";
	}

	try {
		dialogValues = JSON.parse(dialogValues);
	} catch (e) {
		console.log("Unable to parse JSON: ", e);
		dialogValues = null;
	}
	return dialogValues;
}

var instantSearchDialogValues = getInstantSearchDialogValues();;

if (!instantSearchDialogValues) {
	console.error("Algolia Search configuration not found!!!");
}

aa('init', {
  appId: instantSearchDialogValues.app.id,
  apiKey: instantSearchDialogValues.app.apiKey,
  useCookie: true,
})

/* global instantsearch algoliasearch */
var indexNameVal;
var indexNameFromInstantSearchResultComp;
if(document.querySelector(".indexNameForSortByDefaultOption") != undefined)
	indexNameFromInstantSearchResultComp =document.querySelector(".indexNameForSortByDefaultOption").innerHTML;
if(indexNameFromInstantSearchResultComp != null && indexNameFromInstantSearchResultComp != undefined && indexNameFromInstantSearchResultComp != "")
	indexNameVal = indexNameFromInstantSearchResultComp;
else
	indexNameVal = instantSearchDialogValues.app.indexName;
const INDEX_NAME=indexNameVal;


let allResults = null;
const firstLoadClient = algoliasearch(
	instantSearchDialogValues.app.id,
	instantSearchDialogValues.app.apiKey
);

const searchClient = algoliasearch(
	instantSearchDialogValues.app.id,
	instantSearchDialogValues.app.apiKey
);



let getHitsPluginDataPresent = false;
// autocomplete plugins - begin
const recentSearchesPlugin = createLocalStorageRecentSearchesPlugin({
	key: "qs-with-rs-example",
	limit: 3,
	transformSource({
		source
	}) {
		return {
			...source,
			templates: {
				...source.templates,
				header({
					items,
					state,
					createElement
				}) {
					if ((Boolean(state.query) || items.length === 0) && !getHitsPluginDataPresent) {
						return null;
					}

					return createElement(
						"div",
						null,
						/*#__PURE__*/
						createElement(
							"span", {
								className: "aa-SourceHeaderTitle"
							},
							"Recent searches"
						),
						/*#__PURE__*/
						createElement("div", {
							className: "aa-SourceHeaderLine"
						})
					);
				}
			}
		};
	}
});
querySuggestionsPlugin = createQuerySuggestionsPlugin({
	searchClient,
	indexName: instantSearchDialogValues.app.querySuggestionsIndexName,
	getSearchParams() {
		return recentSearchesPlugin.data.getAlgoliaSearchParams({
			hitsPerPage: 3
		});
	},
	/*categoryAttribute: [
		"instant_search",
		"facets",
		"exact_matches",
		"categories"
	],*/
	transformSource({
		source
	}) {
		return {
			...source,
			templates: {
				...source.templates,
				header({
					items,
					state,
					createElement
				}) {
					if (Boolean(state.query) || items.length === 0) {
						return createElement(
						"div",
						null,
						/*#__PURE__*/
						createElement(
							"span", {
								className: "aa-SourceHeaderTitle"
							},
							"Suggested Searches"
						),
						/*#__PURE__*/
						createElement("div", {
							className: "aa-SourceHeaderLine"
						})
					);
					}

					return createElement(
						"div",
						null,
						/*#__PURE__*/
						createElement(
							"span", {
								className: "aa-SourceHeaderTitle"
							},
							"Popular searches"
						),
						/*#__PURE__*/
						createElement("div", {
							className: "aa-SourceHeaderLine"
						})
					);
				}
			}
		};
	}
});
// autocomplete plugins - end

var searchBarData = instantSearchDialogValues.searchBar;
var searchResultsWrapper = $(".search-box-wrapper");
var searchType = $(searchResultsWrapper).data("search-type");
var hitsType = $(searchResultsWrapper).data("hits-type");

if(hitsType == "infiniteScrollHits"){

    if(document.getElementById("hits-per-page-pages")){
	document.getElementById("hits-per-page-pages").style.display = 'none';
	}
	if(document.getElementById("hits-per-page-recipe")){
	document.getElementById("hits-per-page-recipe").style.display = 'none';
	}
    if(document.getElementById("hits-per-page-craft")){
	document.getElementById("hits-per-page-craft").style.display = 'none';
	}
    if(document.getElementById("hits-per-page-product")){
	document.getElementById("hits-per-page-product").style.display = 'none';
	}
    if(document.getElementById("hits-per-page-article")){
	document.getElementById("hits-per-page-article").style.display = 'none';
	}

}



var query = new URL(window.location).searchParams.get(queryKey);
query = (null != query) ? query : '';
if ($('#instant-search-autocomplete input').length > 0) {
	$('#instant-search-autocomplete input').val(query);
}

const virtualSearchBox = instantsearch.connectors.connectSearchBox(() => {});
const infiniteHitsCache = instantsearch.createInfiniteHitsSessionStorageCache();


var configs = {};
getSelectorConfigs();
console.debug("Config set for all selectors!!!");

function getSelectorConfigs() {
	$(instantSearchResultsCmp).each(function() {
		try {
			var _this = $(this);
			var selector = $(_this).data('selector');
			console.debug("Getting configs for selector:  ", selector);
			if (!selector) {
				console.debug("No selector found for Algolia");
				return false;
			}

			var searchResultsConfigJson = $("#searchResultsConfigJson-" + selector).val();
			if (!searchResultsConfigJson) {
				searchResultsConfigJson = "{}";
			}

			try {
				searchResultsConfigJson = JSON.parse(searchResultsConfigJson);
			} catch (e) {
				console.log("Unable to parse JSON: ", e);
			}
			configs[selector] = searchResultsConfigJson;
			console.debug("config set for selector:  ", selector);
		} catch (e) {
			console.error(selector, e);
		}

	});
}

var queries = [];
generateQueries();

function generateQueries() {
	Object.keys(configs).forEach(function(selector) {
		try {
			if (!selector) {
				console.debug("No selector found for Algolia");
				return false;
			}
			var searchResultsConfigJson = configs[selector];
			var filterData = searchResultsConfigJson.filter ? searchResultsConfigJson.filter : {};

			//Set query
			var queryItem = {
				indexName: INDEX_NAME,
				query,
				params: getQueryItemParams(filterData),
			}
			queries.push(queryItem);
		} catch (e) {
			console.error(e);
		}

	});
}


function getSearch(selector, index) {
	var searchResultsConfigJson = $("#searchResultsConfigJson-" + selector).val();
	if (!searchResultsConfigJson) {
		searchResultsConfigJson = "{}";
	}

	try {
		searchResultsConfigJson = JSON.parse(searchResultsConfigJson);
	} catch (e) {
		console.log("Unable to parse JSON: ", e);
	}

	try {
		var filterData = searchResultsConfigJson.filter ? searchResultsConfigJson.filter : {},
			initializedFlags = false;

		console.debug("Generating searchClientItem...");

		//Set searchClients
		const searchClientItem = {
			...searchClient,
			search(requests) {
				if (!initializedFlags) {
					initializedFlags = true;
					const response = {
						results: [allResults[index]],
					};
					return Promise.resolve(response);
				} else {
					const newRequests = requests.map((request)=>{
						// test for empty string and change request parameter: analytics
						if(!request.params.query || request.params.query.length===0) {
							request.params.analytics=false
						}
                      	return request
                    });

					const userRequest = newRequests[0];
					if (filterData.show && filterData.expression) {
						userRequest['filters'] = filterData.expression;
					}
    				if(!userRequest.params.analytics){
						return searchClient.search(newRequests); 
    				}
				}
			},
		}

		return createInstantSearchItem(searchResultsConfigJson, searchClientItem, filterData, selector);

	} catch (e) {
		console.error(index, e);
	}

}


function getQueryItemParams(filterData) {
	var params = {
		'facets': ['*']
	};
	if (filterData.show && filterData.expression) {
		params['filters'] = filterData.expression;
	} else {
		console.debug('Algolia filters disabled');
	}
	return params;
}

const insightsMiddleware = instantsearch.middlewares.createInsightsMiddleware({
	insightsClient: window.aa,
});

function createInstantSearchItem(searchResultsConfigJson, searchClientItem, filterData, selector) {
	let timerId;
	var widgets = [];
	var hitsId = '#hits-' + selector;
	var hitsTemplate = '#hits-template-' + selector;
	if ($(hitsId).length > 0 && searchResultsConfigJson.hits) {
		console.debug("Hits:: ", $(hitsId));
		$(hitsId).attr("data-insights-index", instantSearchDialogValues.app.indexName);
		

		var instantsearchWidgetsConfigJson = {
			hitsPerPage: searchResultsConfigJson.hits.hitsPerPage,
			clickAnalytics: true
		};

		if (filterData.show && filterData.expression) {
			instantsearchWidgetsConfigJson['filters'] = filterData.expression;
		} else {
			console.debug('Algolia filters disabled');
		}

		if (searchType === "autoCompleteSearch") {
			widgets.push(
				virtualSearchBox({})
			);
		} else {
			widgets.push(
				instantsearch.widgets.searchBox({
					container: "#instant-search-autocomplete",
					placeholder: searchBarData.placeholder,
					autofocus: searchBarData.autoFocus,
					showLoadingIndicator: searchBarData.showLoadingIndicator,
					searchAsYouType: false,
					showReset: true,
					showSubmit: true
				}),
			);
		}


		var heroSearchboxId = '#hero-instant-search-box-' + selector;
		//Adding support for hero search box placeholder text
        var heroSearchPlaceholder = $('.hero-instant-search-box-field').data("placeholder-text");
		if ($(heroSearchboxId).length > 0) {
			searchAsYouType = false;
			widgets.push(
				instantsearch.widgets.searchBox({
					container: heroSearchboxId,
					placeholder: searchBarData.placeholder,
					//OLD PLACEHOLDER
                    //placeholder: searchBarData.placeholder,	
					//update search box placeholder for hero search box	
					placeholder: heroSearchPlaceholder,	
					autofocus: searchBarData.autoFocus,
					showLoadingIndicator: searchBarData.showLoadingIndicator,
					searchAsYouType: false,
					showReset: true,
					showSubmit: true
				})
			);
		}

		widgets.push(instantsearch.widgets.configure(instantsearchWidgetsConfigJson));


		//Hits - Begin
        if (hitsType == "normalHits") {
        	widgets.push(
        		instantsearch.widgets.hits({
        			container: hitsId,
        			escapeHTML: false,
        			templates: {
        				item: $(hitsTemplate).html(),
        				empty: "<h1 style='color: #3f000b;'>" + Granite.I18n.get('no-results') + "&nbsp;<q>{{ query }}</q></h1><ul><li style='color:#333333;font-size:1.6rem'>" + Granite.I18n.get('Check your spelling and try again') + "</li><li style='color:#333333;font-size:1.6rem'>" + Granite.I18n.get('Try a different search term') + "</li><li style='color:#333333;font-size:1.6rem'>" + Granite.I18n.get('Keep your search terms different') + "</li></ul><button class='clear-filter h6' tabindex='9' onclick='clearFilter()'>" + Granite.I18n.get('Clear filter') + "</button>",
        			},
        		})
        	)
        } else {
            const resultTypeData = document.getElementById("listingType").getAttribute("value");
			console.log("resultTypeData::",resultTypeData);
			const resultTypeText = resultTypeData.charAt(0).toUpperCase() +resultTypeData.slice(1);

            if (resultTypeData == "products" || resultTypeData == "recipes" || resultTypeData == "crafts" || resultTypeData == "stories") {
        		widgets.push(
        			instantsearch.widgets.infiniteHits({
        				container: hitsId,
        				showPrevious: false,
        				escapeHTML: false,
        				cache: infiniteHitsCache,
        				templates: {
        					item: $(hitsTemplate).html(),
        					empty: "<h1 style='color: #3f000b;'>" + Granite.I18n.get('no-results') + "&nbsp;<q>{{ query }}</q></h1><ul><li style='color:#333333;font-size:1.6rem'>" + Granite.I18n.get('Check your spelling and try again') + "</li><li style='color:#333333;font-size:1.6rem'>" + Granite.I18n.get('Try a different search term') + "</li><li style='color:#333333;font-size:1.6rem'>" + Granite.I18n.get('Keep your search terms different') + "</li></ul><button class='clear-filter h6' tabindex='9' onclick='clearFilter()'>" + Granite.I18n.get('Clear filter') + "</button>",
        					showMoreText(data, {
        						html
        					}) {
        						return html`<span class="loadmorebutton">Show More ${resultTypeText}</span>`;
        					},
        				},
        			})
        		)
            }else{
        	widgets.push(
        		instantsearch.widgets.infiniteHits({
        			container: hitsId,
        			escapeHTML: false,
        			templates: {
        				item: $(hitsTemplate).html(),
        				empty: "<h1 style='color: #3f000b;'>" + Granite.I18n.get('no-results') + "&nbsp;<q>{{ query }}</q></h1><ul><li style='color:#333333;font-size:1.6rem'>" + Granite.I18n.get('Check your spelling and try again') + "</li><li style='color:#333333;font-size:1.6rem'>" + Granite.I18n.get('Try a different search term') + "</li><li style='color:#333333;font-size:1.6rem'>" + Granite.I18n.get('Keep your search terms different') + "</li></ul><button class='clear-filter h6' tabindex='9' onclick='clearFilter()'>" + Granite.I18n.get('Clear filter') + "</button>",
        			},
        		})
        	)

            }

        }
		//Hits - End


		//hits per page


//hits per page


//console.log("hitsType::"+hitsType);
if(hitsType == "normalHits"){

const renderHitsPerPageList = (renderOptions, isFirstRender) => {
    const hitsperPagecontainer = document.querySelector('#hits-per-view-'+selector);

    const {
        items,
        refine,
        createURL,
        widgetParams
    } = renderOptions;

    if (isFirstRender) {
        hitsperPagecontainer.appendChild(document.createElement('ul'));


        return;
    }
    hitsperPagecontainer.querySelector('ul').innerHTML = [
        { label: '20', value: 20,  default: true },
						{ label: '50', value: 50 },
						{ label: '100', value: 100 },
					]

        .map(
            item =>
            `<li class="ais-HitsPerPage-option"><div class="option">
          <a
            href="#"
            data-value="${item.value}"
            data-text="${item.label}"
        	data-index="${item.index}" class="custom-select-hits-anchor"
          >
            <span class="custom-select-hits custom-select">${item.label}</span>
          </a>
        </div></li>`
        )
        .join('');

    [...hitsperPagecontainer.querySelectorAll('a')].forEach(element => {
        element.addEventListener('click', (event) => {
            event.preventDefault();
            refine(event.currentTarget.dataset.value);

        });
    });
        let selectedHitsIndexVal2 = $('#selectedHitsIndexValue-' + selector).val();
        			(() => {
                        let oldPushState = history.pushState;
                        history.pushState = function pushState() {
                            let ret = oldPushState.apply(this, arguments);
                            window.dispatchEvent(new Event('pushstate'));
                            window.dispatchEvent(new Event('locationchange'));
                            return ret;
                        };
                        let oldReplaceState = history.replaceState;
                        history.replaceState = function replaceState() {
                            let ret = oldReplaceState.apply(this, arguments);
                            window.dispatchEvent(new Event('replacestate'));
                            window.dispatchEvent(new Event('locationchange'));
                            return ret;
                        };
                        window.addEventListener('popstate', () => {
                            window.dispatchEvent(new Event('locationchange'));
                        });
                    })();

                    window.addEventListener('locationchange', function () {
                        const params = new URLSearchParams(window.location.search);

        				const selectedIndexVal2 = params.get("sortBy");
        				if (selectedIndexVal2) {
        					$("#sort-by-" + selector + " ul.select__choose-option li.ais-SortBy-option a").each(function(event) {
        						if ($(this).attr("data-value") == selectedIndexVal2) {

        							$(".option.custom-select").attr("aria-label", $(this).text().trim());
        							$(".option.custom-select span").text($(this).text().trim());
        							$(".option.custom-select span").attr("data-sort-value", $(this).data("value"));
        							$(this).addClass("active");
        						}

        					});
    					} else {
							$("#sort-by-pages .select__choose-option li.ais-SortBy-option:first a").addClass('active');
    					}
                    });
//let selectedHitsIndexVal2 = $('#selectedHitsIndexValue-'+selector).val();
if(selectedHitsIndexVal2)
    {
        setTimeout(function(){
         $("#hits-per-page-"+selector+" #hits-per-view-"+selector+" ul li.ais-HitsPerPage-option a").each(function(event) {
        if( $(this).attr('data-value') == selectedHitsIndexVal2){
				$(this).addClass('active');
    	}
    })
        },100);
    }
    };
        const customHitPerPageList = instantsearch.connectors.connectHitsPerPage(
    renderHitsPerPageList
);


const itemLoadingPerHit = parseInt(document.getElementById("resultPerPage").getAttribute("value"));

var hitsPerPageId = '#hits-per-view-'+selector ;
       // var hitsPerPageId = '#hits-per-view-pages' ;

		if ($(hitsPerPageId).length > 0){
			widgets.push(
				customHitPerPageList({
					container: hitsPerPageId,
					items: [{
						label: '20',
						value: itemLoadingPerHit,
                		tabindexval:101,
						default: true
					},
					{
						label: '50',
						value: 50,
                        tabindexval:102
					},
					{
						label: '100',
						value: 100,
                        tabindexval:103
					},
				],
				})
			);
		}

}
        // Sort By Widget


		const renderSortbyList = (renderOptions, isFirstRender) => {
		    const sortbycontainer = document.querySelector('#sort-by-' + selector);

		    const {
		        items,
		        refine,
		        createURL,
		        widgetParams
		    } = renderOptions;

		    if (isFirstRender) {
		        sortbycontainer.appendChild(document.createElement('ul'));

		        return;
		    }
		    sortbycontainer.querySelector('ul').className = 'select__choose-option custom-select d-none';
		    sortbycontainer.querySelector('ul').innerHTML = searchResultsConfigJson.sortBySelector.data

		        .map(
		            item =>
		            `<li class="ais-SortBy-option" tabindex="-1"><div class="option">
		          <a
		            href="#"
		            data-value="${item.value}"
					tabindex="-1"
		            data-text="${item.label}" class="custom-select-sorts-anchor"
		          >
		            <span class="custom-select-sorts custom-select" tabindex="${item.tabindexval}">${item.label}</span>
		          </a>
		        </div></li>`
		        )
		        .join('');

	function dropdonOpenClose() {
            let closestParentDiv1 = 'div.sort-by-select';
            if ($(closestParentDiv1).hasClass('active')) {
                $(closestParentDiv1).removeClass('active');
                $(closestParentDiv1).find('i.fas').removeClass('fa-angle-up').addClass('fa-angle-down');
                $(closestParentDiv1).find('.select__choose-option.custom-select').addClass('d-none');
            } else {
                $(closestParentDiv1).addClass('active');
                $(closestParentDiv1).find('i.fas').removeClass('fa-angle-down').addClass('fa-angle-up');
                $(closestParentDiv1).find('.select__choose-option.custom-select').removeClass('d-none');
            }
        }
        let istabVisibletrue = $('.tabs.tab-heading').is(":visible"); //true
        currentTab = $("li[data-active='true'] ").find("button").attr("aria-controls");
        //currentTab="general-tab";
        $("body").bind("keypress", ".select__choose-option li a", function(e) {
            if(e.target.classList[0] !="aa-Input" && e.target.classList[0] != 'ais-SearchBox-input' && e.target.classList[0] !='emailInput')
			{
				e.preventDefault();
			}
            if (window.preventDuplicateKeyPresses) {
                return;
            }
            window.preventDuplicateKeyPresses = true;
            window.setTimeout(function() {
                window.preventDuplicateKeyPresses = false;
            }, 500);   
            if (e.target.classList[0] == "select__default-option" || e.target.classList[0] == "classforIndex") {
                if (e.which == 13) {
                    if (!$(".justify-content-center.contentBox .sort-by-select .ais-SortBy-option").hasClass('selected')) {
                        dropdonOpenClose();
                    }
                }
            }
        })
        /***  for file by selcection using tab ***/
        let tabIndexCounters = 2;
        $(".ais-DynamicWidgets-widget").each(function(event) {
            if($(this).text()!='')
            {
                $(this).attr("tabindex", tabIndexCounters);
                tabIndexCounters = tabIndexCounters + 1;
            }
        });
		  $(".tab-content .list__filter-group .dynamic-widgets .ais-DynamicWidgets .ais-DynamicWidgets-widget").each(function(event) {
            if($(this).text()!='')
            {
                $(this).attr("tabindex", "0");
            }
        });
		    [...sortbycontainer.querySelectorAll('a')].forEach(element => {
		        element.addEventListener('click', event => {
		            event.preventDefault();
		            refine(event.currentTarget.dataset.value);
					let selectedTab = document.querySelector("button.tab-btn[aria-expanded=true]"),
						indexLabel = event.currentTarget.dataset.text,
        				spanIndex;
        			if($(window).width >= 992){
						if(selectedTab){
                            if(selectedTab.id == "general-tab-button") {
                                spanIndex = 0;
                            } else if(selectedTab.id == "recipe-tab-button") {
                                spanIndex = 1;
                            } else if(selectedTab.id == "craft-tab-button") {
                                spanIndex = 2;
                            } else if(selectedTab.id == "product-tab-button") {
                                spanIndex = 3;
                            } else {
                                spanIndex = 4;
                            }
                            if(document.querySelectorAll("div.custom-select > span")[spanIndex].innerText != indexLabel){
                                document.querySelectorAll("div.custom-select > span")[spanIndex].innerText = indexLabel;
                            }
                        } else {
                            if(document.querySelector("div.custom-select > span").innerText != indexLabel){
                                document.querySelector("div.custom-select > span").innerText = indexLabel;
                            }
                        }
    				}
		        });
		    });
		};

		// Create the custom widget


		const customSortList = instantsearch.connectors.connectSortBy(
		    renderSortbyList
		);


		var sortById = '#sort-by-' + selector;
		if ($(sortById).length > 0 && searchResultsConfigJson.sortBySelector) {
		    searchResultsConfigJson.sortBySelector.enabled === true ?
		        widgets.push(
		            //instantsearch.widgets.sortBy({
		            customSortList({
		                container: sortById,
		                items: searchResultsConfigJson.sortBySelector.data
		            })
		        ) :
		        console.log("Sort By not enabled for " + selector);
		}
		// Pagination Widget
		if(hitsType == "normalHits"){
		var paginationId = '#pagination-' + selector;
		if ($(paginationId).length > 0 && searchResultsConfigJson.pagination) {
			searchResultsConfigJson.pagination.show === true ?
				widgets.push(
					instantsearch.widgets.pagination({
						container: paginationId,
						showFirst: false,
                        showLast: false
					})
				) :
				console.log("Pagination not enabled for " + selector);;
		}
		}


		// current Refinements Widgets
		let screenWidthforFilter = $(window).width();
        if (screenWidthforFilter <= 992) {
                $('.bootomFilterTagBox.fordesktopFilter').remove();
            }
        else{
                    $('.bootomFilterTagBox.formobileFilter').remove();    
        }
		var currentRefinementsId = '#current-refinements-' + selector;
		if ($(currentRefinementsId).length > 0) {
			widgets.push(
				instantsearch.widgets.currentRefinements({
					container: currentRefinementsId,
					excludedAttributes: ['hero.rating','query'],
				})
			);
		} else {
			console.log("Current Refinements does not exist for " + selector);
		}


		const clearRefinementId = '#clear-refinements-' + selector;
		if ($(clearRefinementId).length > 0) {
			widgets.push(
					instantsearch.widgets.clearRefinements({
						container: clearRefinementId,
						templates: {
						    resetLabel: Granite.I18n.get('clear-ref'),
	  					}
					})
			);
		} else {
			console.log("Clear Refinements does not exist for " + selector);
		}


		// Dynamic Widgets
		var dynamicWidgetsId = '#dynamic-widgets-' + selector;
		if ($(dynamicWidgetsId).length > 0) {
			widgets.push(
				instantsearch.widgets.dynamicWidgets({
					container: dynamicWidgetsId,
					widgets: [container =>
						instantsearch.widgets.panel({				  
											  templates: {
												  header: (input) => {

													  const attr = input.widgetParams.attribute;
													  const parts = attr.split('.');
													  const attrName = parts.length === 2 ? parts[1] : attr;
													  const splitAttr = attrName.replace(/(?=[A-Z])/g, ' ');
													  return splitAttr;
												  },

											  },
										  })
					   (instantsearch.widgets.ratingMenu)({
						  container,
						  attribute: 'hero.rating',
						  templates: {
   								item(data) {
										 return `
	   										<a
		 										href="${data.url}"
		 										class="${data.cssClasses.link}"
		 										aria-label="${data.name} &amp; up">
		 										${data.stars
		  										 .map(
			 										isFilled => `
		   												<svg
			 												class="${data.cssClasses.starIcon} ${
			   													isFilled
				 												? data.cssClasses.fullStarIcon
																 : data.cssClasses.emptyStarIcon
																 }"
			 												aria-hidden="true"
			 												width="24"
														 	height="24"
		   													>
			 												<use xlink:href="#${
			   												isFilled
				 											? 'ais-RatingMenu-starSymbol'
				 											: 'ais-RatingMenu-starEmptySymbol'
			 												}" />
		   												</svg>
														 `
		   												)
		   											.join('')}
		 										<span class="${data.cssClasses.label}">&amp; Up</span>
	  										 </a>
								 			`;
   										},
									 },						 
						}),],
					fallbackWidget: ({
							container,
							attribute
						}) =>
						instantsearch.widgets.panel({
							templates: {
								header: (input) => {
									const attr = input.widgetParams.attribute;
									const parts = attr.split('.');
									const attrName = parts.length === 2 ? parts[1] : attr;
									const splitAttr = attrName.replace(/(?=[A-Z])/g, ' ');
									return splitAttr;
								},
							},
						})(instantsearch.widgets.refinementList)({
							container,
							attribute,
							limit: 30,
                            showMore: true,
                            showMoreLimit: 100,
						}),
				})
			);

		} else {
			console.log("Dynamic widgets does not exist for " + selector);
		}


		//Stats - Filter
		var statsId = '#results-count-' + selector;
		if ($(statsId).length > 0) {
			widgets.push(
				instantsearch.widgets.stats({
					container: statsId,
					templates: {
						text: `
						  {{^areHitsSorted}}
							{{#hasNoResults}}No ${Granite.I18n.get('res-ints')}{{/hasNoResults}}
							{{#hasOneResult}}1 ${Granite.I18n.get('res-int')}{{/hasOneResult}}
							{{#hasManyResults}}{{#helpers.formatNumber}}{{nbHits}}{{/helpers.formatNumber}}  ${Granite.I18n.get('res-ints')}{{/hasManyResults}}
						  {{/areHitsSorted}}`,
					},
				})
			);

		} else {
			console.log("stats widgets does not exist for " + statsId);
		}

		//Stats
		var statsId = '#total-' + selector;
		if ($(statsId).length > 0) {
			widgets.push(
				instantsearch.widgets.stats({
					container: statsId,
					templates: {
						text: `
						  {{^areHitsSorted}}
							{{#hasNoResults}}0{{/hasNoResults}}
							{{#hasOneResult}}1{{/hasOneResult}}
							{{#hasManyResults}}{{#helpers.formatNumber}}{{nbHits}}{{/helpers.formatNumber}}{{/hasManyResults}}
						  {{/areHitsSorted}}`,
					},
				})
			);
		} else {
			console.log("stats widgets does not exist for " + selector);
		}


		// Voice Search Widget
		if ($('#voiceSearchBox').length > 0) {
			instantSearchDialogValues.voiceSearch.show === true ?
				widgets.push(
					instantsearch.widgets.voiceSearch({
						container: "#voiceSearchBox",
						searchAsYouSpeak: false,
						language: instantSearchDialogValues.voiceSearch.language,
					})
				) :
				console.log("Voice Search not enabled");
		}
	}

	const search = instantsearch({
		indexName: INDEX_NAME,
		searchClient: searchClientItem,
		routing: searchRouting,
		initialUiState: {
			indexName: {
				query: query,
				page: 0,
			},
		},
		searchFunction(helper) {


			if(searchAsYouType){
				if(searchAsYouType && ( "" === helper.state.query || helper.state.query.length > 0)){
					clearTimeout(timerId);
					timerId = setTimeout(() => {
						console.log("Search as you type - Searching for Single search results for: ", helper.state.query);
						helper.on("search", function(){
							if ($('#instant-search-autocomplete input').length > 0) {
							   $('#instant-search-autocomplete input').val(helper.state.query);
							}
							if(document.querySelector(".aa-ClearButton") && $('#instant-search-autocomplete input').val().length > 0){
                                document.querySelector(".aa-ClearButton").removeAttribute("hidden");
                            }
							});
							/* Setting analytics to false if search query is empty */
							if (helper.state.query.length == 0 || helper.state.query === "") {
								helper.state.analytics = false;
							}
						   	helper.search();
					}, 200);
				} else {
					console.log("Waiting for minimum characters to search: ", helper.state.query);
				}
			} else if (query != helper.state.query && "" != helper.state.query) {
				console.log("Redirecting to find search results for: ", helper.state.query);
				if(searchAsYouType) {
					console.log('Pushing state: ', window.location.pathname + "?" + queryKey + '=' + helper.state.query);
					//window.history.pushState({}, '', window.location.pathname + "?" + queryKey + '=' + helper.state.query);
				} else {
					var currentVal= "";
        			currentVal= $('.ais-SearchBox-input').val();
        			console.log(currentVal + " currentValue ");
   					window.top.location = window.location.pathname+'?'+queryKey+ '=' + currentVal;
				}

			} else {

				console.log("Finding search results for: ", query);
                //const container = document.querySelectorAll('[id^="hits-"]');
                //const container = document.querySelector('.ais-Hits');
                //console.log(container);

                //container.style.display = helper.state.query === '' ? 'none' : '';



				helper.state.query = query;
				/* Setting analytics to false if search query is empty */
				if (helper.state.query.length == 0) {
					helper.state.analytics = false;
				}
				helper.search(); 
			}


		},
	});

	console.debug("widgets: ", widgets);
	search.addWidgets(widgets);

	search.use(insightsMiddleware);

    let userToken;
    aa('getUserToken', null, (err, newUserToken) => {
        if (err) {
        console.error(err);
        return;
    }
        userToken = newUserToken;
        //console.log("userTokenValue:",userToken);
        window.aa('setUserToken', userToken);
    });

	return search;
}

function handleMutation() {
    if ((window.location.hostname.indexOf("hersheyland") > -1 || window.location.pathname.indexOf("hersheyland") > -1) && window.location.pathname.indexOf("search") > -1) {
        document.querySelector("#voiceSearchBox").style.display = "none";
    }
}
var observerSearch = new MutationObserver(handleMutation);
const targetNodeSearch = document;
const configSearch = {
    childList: true,
    subtree: true
};
 
observerSearch.observe(targetNodeSearch, configSearch);
handleMutation();

const getHitsPlugin = {
  getSources({ query,state }) {
        if (!query) {
     	 	return [];
    	}
	const sources = [];  

	sources.push({
        sourceId: 'products',
        getItems() {
          return getAlgoliaResults({
            searchClient,
            queries: [
              {
                indexName: INDEX_NAME,
                query,
                params: {
                  hitsPerPage: 5,
                  attributesToSnippet: ['name:10', 'description:35'],
                  snippetEllipsisText: '…',
                },
              },
            ],
          });
        },
        templates: {
           header({ items, html }) {
                if (items.length === 0) {
                	getHitsPluginDataPresent = false;
                	return null;
                }
                getHitsPluginDataPresent = true;

                return html`<span class="aa-SourceHeaderTitle">Results</span>
                	<div class="aa-SourceHeaderLine" />`;
                },
           item({ item,components, html }) {
                if (item.faq) {
					return null;
                }
                return html`<div class="aa-ItemWrapper">
                  <a href="${item.url.href}" className="aa-ItemLink">
                      <div class="aa-ItemContent">
                        <div class="aa-ItemIcon aa-ItemIcon--picture aa-ItemIcon--alignTop">
                          <img
                            src="${item.hero.image}"
                            alt="${item.metaTags.primaryImageAltText}"
                            width="40"
                            height="40"
                          />
                        </div>
                        <div class="aa-ItemContentBody">
                          <div class="aa-ItemContentTitle">
                            ${components.Highlight({
                              hit: item,
                              attribute: 'title',
                            })}
                          </div>
                          <div class="aa-ItemContentDescription">
                            ${components.Snippet({
                              hit: item.seo,
                              attribute: 'description',
                            })}
                          </div>
                        </div>
                        <div class="aa-ItemActions">

                              <button
                                class="aa-ItemActionButton aa-DesktopOnly aa-ActiveOnly"
                                type="button"
                                title="Select"
                              >
                                <svg
                                  viewBox="0 0 24 24"
                                  width="20"
                                  height="20"
                                  fill="currentColor"
                                >
                                  <path
                                    d="M18.984 6.984h2.016v6h-15.188l3.609 3.609-1.406 1.406-6-6 6-6 1.406 1.406-3.609 3.609h13.172v-4.031z"
                                  />
                                </svg>
                              </button>

                        </div>
                      </div> 
                  </a>
                </div>`;               
          },
        },
	});

	sources.push({
        sourceId: 'faq',
        getItems() {
          return getAlgoliaResults({
            searchClient,
            queries: [
              {
                indexName: INDEX_NAME,
                query,
                params: {
                  hitsPerPage: 5,
                  attributesToSnippet: ['name:10', 'description:35'],
                  snippetEllipsisText: '…',
                },
              },
            ],
          });
        },
        templates: {
           header({ items, html }) {
                if (items.length === 0) {
                    getHitsPluginDataPresent = false;
                	return null;
                }  
                getHitsPluginDataPresent = true;   
                return html`<span class="aa-SourceHeaderTitle">FAQs</span>
                	<div class="aa-SourceHeaderLine" />`;
                },
           item({ item,components, html }) {
                if (item.faq) {
                	return html`<a style="border-bottom: none;" href="${item.url.href}" class="aa-ItemWrapper">
                      <div className="aa-ItemLink">
                          <div class="aa-ItemContent">
                			<div class="aa-ItemIcon aa-ItemIcon--picture aa-ItemIcon--alignTop" style="display: none"></div>
                            <div class="aa-ItemContentBody">
                              <div class="aa-ItemContentTitle">
                                ${components.Highlight({
                                  hit: item.faq,
                                  attribute: 'question',
                                })}
                              </div>
                              <div class="aa-ItemContentDescription">
                                ${components.Snippet({
                                  hit: item.jcr,
                                  attribute: 'description',
                                })}
                              </div>
                            </div>
                            <div class="aa-ItemActions">

                                  <button
                                    class="aa-ItemActionButton aa-DesktopOnly aa-ActiveOnly"
                                    type="button"
                                    title="Select"
                                  >
                                    <svg
                                      viewBox="0 0 24 24"
                                      width="20"
                                      height="20"
                                      fill="currentColor"
                                    >
                                      <path
                                        d="M18.984 6.984h2.016v6h-15.188l3.609 3.609-1.406 1.406-6-6 6-6 1.406 1.406-3.609 3.609h13.172v-4.031z"
                                      />
                                    </svg>
                                  </button>

                            </div>
                          </div> 
                      </div>
                    </a>`;
                }
          },
        },
	});	

	return sources;
  },

};
function startAutocomplete() {
	autocomplete({
		container: "#instant-search-autocomplete",
		placeholder: searchBarData.placeholder,
		plugins: [querySuggestionsPlugin, getHitsPlugin, recentSearchesPlugin],
		openOnFocus: true,
	    //disable detached mode
        //detachedMediaQuery: 'none', 
        initialState: {
			query: query,
			page: 0
		},
		onSubmit({
			state
		}) {
			if (state.query) {
				var pageURL = window.location.href;
        		var selectedVal = "";
				if((pageURL.includes("hersheyland.com") || pageURL.includes("/hersheyland/en-us")) && !pageURL.includes("search")){

				        if(pageURL.includes("products")){
				       	    var selectedVal = "&selected=product";
				        }else if(pageURL.includes("recipes")){
				            var selectedVal = "&selected=recipe";
				        }else if(pageURL.includes("crafts") || pageURL.includes("activities")){
				            var selectedVal = "&selected=craft";
				        } else if(pageURL.includes("stories")){
				            var selectedVal = "&selected=article";
				        }
				}

				window.location.href = searchPagePath + '?' + queryKey + '=' + state.query+selectedVal;			
			}
			$('.mobile-search').removeClass('active');

		}


	});
}


if(isSearchResultsComponentExist){
	firstLoadClient.multipleQueries(queries).then(({
		results
	}) => {
		allResults = results;
		console.debug("allResults: ", allResults);


		var index = -1;
		$(instantSearchResultsCmp).each(function() {
			try {
				index++;
				var _this = $(this);
				var selector = $(_this).data('selector');
				console.debug("Processing Selector:  ", selector);
				if (!selector) {
					console.debug("No selector found for Algolia: ", index);
					return false;
				}

				processSearch(selector, index);
			} catch (e) {
				console.error(selector, e)
			}
		});
	});

} else {
	processNonSearchPageSearch();
}


function processSearch(selector, index) {
	var search = getSearch(selector, index);
	if (search) {

        //Using search.on('render') method 
        //allows us to modify Algolia hits after rendering
        search.on('render', () => {
        	var quickView = document.querySelectorAll('.quick-view-btn');
        	var quickViewTranslated = Granite.I18n.get('Quick View');
        	//Set button translation for all quick view button elems
        	for (var i = 0; i < quickView.length; i++) {
                quickView[i].innerText = quickViewTranslated;
            }
			let adimoQuickviewButtons = document.querySelectorAll(".adimo-quick-view-btn");
        	let buyNowTranslation = Granite.I18n.get('Buy Now');
        	if(adimoQuickviewButtons){
                adimoQuickviewButtons.forEach(function(adimoQuickViewButton){
                    adimoQuickViewButton.textContent = buyNowTranslation;
                });
    		}
			let adimoProductDetails = document.querySelectorAll(".adimo-product-details");
        	let produdctDetailTranslation = Granite.I18n.get('Product Detail');
        	if(adimoProductDetails){
                adimoProductDetails.forEach(function(adimoProductDetail){
                    adimoProductDetail.textContent = produdctDetailTranslation;
                });
    		}
    	});
        
        search.on('render', () => {
        	var featured = document.getElementsByClassName('featured');
        	var featuredTranslated = Granite.I18n.get('Featured');
        	//Set featured text translation 
        	for (var i = 0; i < featured.length; i++) {
                featured[i].setAttribute('data-text',featuredTranslated)  ;
        		//console.log('featuredTranslated...i'+featuredTranslated);
            }
			let searchBoxInput = document.getElementsByClassName('ais-SearchBox-input');
        	if(searchBoxInput.length){
   				var ariaLabelTranslated = Granite.I18n.get('Search Box Aria Label');
   				searchBoxInput[0].setAttribute('aria-label', ariaLabelTranslated);
    		}
    	});

		search.on("render", () => {
            var cancelTranslated = Granite.I18n.get("Cancel");
            setInterval(function() {
                if(document.querySelector('.aa-DetachedCancelButton') != null) {
                    document.querySelector('.aa-DetachedCancelButton').innerHTML = cancelTranslated;
                }
        	},300);
    	});
        
		search.on('render', () => {
        	//Clear Button Translation
       		 var clearTranslated = Granite.I18n.get('CLEAR');
       		 $('.aa-ClearButton').attr('clear-data-text', clearTranslated);

			//PackType Translation
        	var packType = document.getElementsByClassName('pack-type');
        	var packTypeTranslated = Granite.I18n.get('Pack Type');
        	//Set packType text translation 
        	for (var i = 0; i < packType.length; i++) {
				if(packType[i].getAttribute("tohide")!=null){
					packType[i].firstChild.innerText =  packTypeTranslated+":";
				}
            }
    	});

		search.start();

		if (0 == index) {
			searchType === "autoCompleteSearch" ?
				search.addWidgets([
					startAutocomplete()
				]) :
				console.log("Autocomplete not enabled");
		}
	}
}


function processNonSearchPageSearch() {
	let timerId, nonSearchPageWidgets = [];
	var clearTranslated = Granite.I18n.get("CLEAR"); 
    setInterval(function(){                           
    	$('#instant-search-autocomplete .aa-InputWrapperSuffix button.aa-ClearButton').attr("clear-data-text",clearTranslated);
    },300) ;
	const search = instantsearch({
		indexName: INDEX_NAME,
		searchClient: searchClient,
		routing: getSearchRouting (false),
		searchFunction(helper) {
			if ("" != helper.state.query) {
				console.log("Redirecting to search results page for: ", helper.state.query);
				window.location.href = searchPagePath + '?' + queryKey + '=' + helper.state.query;
			}
		},
	});
	if($('#voiceSearchBox').length > 0 && instantSearchDialogValues.voiceSearch.show === true){
		nonSearchPageWidgets.push(
			instantsearch.widgets.voiceSearch({
				container: "#voiceSearchBox",
				searchAsYouSpeak: false,
				language: instantSearchDialogValues.voiceSearch.language,
			})
		);
    }

	if (searchType === "autoCompleteSearch") {
		nonSearchPageWidgets.push(
			virtualSearchBox({})
		);
	} else {
		nonSearchPageWidgets.push(
			instantsearch.widgets.searchBox({
				container: "#instant-search-autocomplete",
				placeholder: searchBarData.placeholder,
				autofocus: searchBarData.autoFocus,
				showLoadingIndicator: searchBarData.showLoadingIndicator,
				searchAsYouType: false,
				showReset: true,
				showSubmit: true
			}),
		);
	}

	search.addWidgets(nonSearchPageWidgets);

	search.start();

	if(searchType === "autoCompleteSearch"){
		nonSearchPageWidgets.push(startAutocomplete());
    }
}

$(".dynamic-widgets .ais-DynamicWidgets .ais-Panel-header").click(function(e) {
	//$(this).closest(".facet_container").toggleClass("facet_container_active");
	$(this).siblings(".ais-Panel-body").slideToggle();
});

function clearFilter() {
    var url = window.location.href;
    var queryParam = '?'+url.split('?')[1];
    var newUrl = url.replace(queryParam, '');
    window.location.href = newUrl;
}

var currentUrl = window.location.href;
if((currentUrl.includes("hershey-corporate") == true) || (currentUrl.includes("thehersheycompany") == true)) {
	$(".search-form form .search-box-wrapper").addClass("searchBox_style");
}