// For license information, see `https://assets.adobedtm.com/11439a76c997/4666345d54db/6e6762062286/RC7c15c5b02fbe4b9994c35509fbf8b206-source.js`.
_satellite.__registerScript('https://assets.adobedtm.com/11439a76c997/4666345d54db/6e6762062286/RC7c15c5b02fbe4b9994c35509fbf8b206-source.min.js', "<script async src=\"https://www.googletagmanager.com/gtag/js?id=G-E62CCY686G\"></script>\n<script>\n  // initialize gtag\n  window.dataLayer = window.dataLayer || [];\n  function gtag () { dataLayer.push(arguments); }\n  gtag('js', new Date());\n\n  // apply the consent level to consent mode v2 config\n  // https://developers.google.com/tag-platform/gtagjs/reference#consent\n  // set default consent state\n  gtag('consent', 'default', {\n    'ad_storage': 'denied',\n    'ad_user_data': 'denied',\n    'ad_personalization': 'denied',\n    'analytics_storage': 'denied'\n  });\n\n  // update it since we know this script runs in the performance cookies context\n  // TO DO: integrate targeting cookies detection\n  gtag('consent', 'update', {\n    'analytics_storage': 'granted'\n  });\n\n  (function (window, document, gtag) {\n\n    // helper functions\n    function debounce (func, wait, immediate) {\n      var timeout;\n      return function () {\n        var context = this, args = arguments;\n        var later = function () {\n          timeout = null;\n          if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n      };\n    }\n\n    function getPriceSpiderSKUfromURL (urlString) {\n      var sku = '(not set)';\n      if (urlString && typeof urlString == 'string') {\n        try {\n            var u = new URL(urlString);\n            if (u.searchParams) {\n              sku = u.searchParams.get('ps-sku') || sku;\n            }\n        } catch (error) {\n            return sku;\n        }\n      }\n      return sku;\n    }\n\n    var measurementIDs = {\n      master: 'G-E62CCY686G',\n      hersheyland: 'G-EKHHQMT8H4'\n    };\n\n    var oneTrustActiveGroups = {\n      necessary: 'C0001',\n      performance: 'C0002',\n      functional: 'C0003',\n      targeting: 'C0004'\n    };\n\n    var pageMeta = {\n      def: '(other)',\n      clean: function (value) {\n        var a = value.split(',');\n        var val = [];\n        for (var i=0,ii=a.length; i<ii; ++i) {\n          var matches = a[i].match(/[A-z0-9]+/gi);\n          if (matches && matches.length) {\n            val.push(matches.join('').toLowerCase().trim());\n          }\n        }\n        return val.join('|');\n      },\n      get: function (name) {\n        var metaTag = document.querySelector('meta[name=\"' + name + '\"]');\n        return (metaTag && metaTag.content) ? this.clean(metaTag.content) : this.def;\n      },\n      // <meta name=\"brand\" content=\"CADBURY\">\n      getBrand: function () {\n        return this.get('brand');\n      },\n      // Use <meta name=\"brand-tag\" content=\"CADBURY\"> for pages that don't have <meta name=\"brand\" content=\"CADBURY\">\n      getBrandTag: function () {\n        return this.get('brand-tag');\n      },\n      // <meta name=\"primaryCategory\" content=\"Stories\">\n      getContentGroup: function () {\n        return this.get('primaryCategory');\n      },\n      // <meta name=\"template\" content=\"article-blog\">\n      getContentType: function () {\n        return this.get('template');\n      }\n    };\n\n    // if relevant consent state is updated, adjust config\n    if (window.OneTrust && window.OneTrust.OnConsentChanged && typeof window.OneTrust.OnConsentChanged == 'function') {\n      window.OneTrust.OnConsentChanged(function () {\n        if (window.OnetrustActiveGroups && !window.OnetrustActiveGroups.match(new RegExp(oneTrustActiveGroups.performance))) {\n          gtag('consent', 'update', {\n            'analytics_storage': 'denied'\n          });\n        }\n      });\n    }\n\n    // configure for each measurement id (should send pageview by default)\n    // pass in custom dimensions (valid only once per config call)\n    for (var key in measurementIDs) {\n      gtag('config', measurementIDs[key], {\n        content_group: pageMeta.getContentGroup(),\n        brand: pageMeta.getBrand() || pageMeta.getBrandTag(),\n        content_type: pageMeta.getContentType()\n      });\n    }\n\n    // custom event tracking\n    var customEvents = {\n      anchor: {\n        external: {\n          is: function (anchor) {\n            var external = false;\n\n            if (anchor.href && anchor.href.startsWith('http')) {\n              try {\n                external = new URL(anchor.href).origin !== location.origin;\n              } catch (error) {\n                external = false;\n              }\n            }\n\n            return external;\n          },\n          send: function (anchor) {\n            customEvents.anchor.send(anchor, 'hsy_link_external_click', null);\n          }\n        },\n        share: {\n          getAction: function (anchor) {\n            var shareAction = '(other)';\n            if (anchor.className.indexOf('socialShareLinks') > -1) {\n              shareAction = (anchor.className.indexOf('clipboard') > -1) ? 'Copy URL' : 'Share Button';\n            } else if (anchor.hasAttribute('aria-label')) {\n              shareAction = anchor.getAttribute('aria-label').replace('share','').trim();\n            } else if (anchor.id == 'printRecCraftDesc') {\n              shareAction = 'print';\n            }\n            shareAction = shareAction.toLowerCase();\n            return shareAction;\n          },\n          is: function (anchor) {\n            return anchor.matches('nav.share a');\n          },\n          send: function (anchor) {\n            var t = this;\n            customEvents.anchor.send(anchor, 'hsy_link_share_click', { share_action: t.getAction(anchor) });\n          }\n        },\n        whereToBuy: {\n          getPriceSpiderSKU: function (anchor) {\n            if (anchor && anchor.href) {\n              return getPriceSpiderSKUfromURL(anchor.href);\n            } else return '(not set)';\n          },\n          is: function (anchor) {\n            return (anchor.href.indexOf('where-to-buy.html') > -1);\n          },\n          send: function (anchor) {\n            var t = this;\n            customEvents.anchor.send(anchor, 'hsy_where_to_buy_link', { ps_sku: t.getPriceSpiderSKU(anchor) });\n          }\n        },\n        bind: function () {\n          var t = this;\n          document.querySelectorAll('a').forEach(function (anchor) {\n            anchor.addEventListener('click', function (evt) {\n              for (var k in t) {\n                if (t[k].hasOwnProperty('is') && t[k].hasOwnProperty('send') && t[k].is(anchor)) {\n                  t[k].send(anchor);\n                }\n              }\n              t.send(anchor, 'hsy_link_click', null);\n            });\n          });\n        },\n        send: function (anchor, eventName, params) {\n          var obj = {\n            click_text: anchor.innerText.trim() || '(not set)',\n            click_url: anchor.href || '(not set)',\n            // overlap with ga4 parameters: https://support.google.com/analytics/answer/9216061?hl=en\n            link_id: anchor.id || '(not set)',\n            link_classes: anchor.className.trim() || '(not set)'\n          };\n          if (params) {\n            for (var k in params) {\n              obj[k] = params[k];\n            }\n          }\n          gtag('event', eventName, obj);\n        }\n      },\n      bakeMode: {\n        getState: function (input) {\n          return (input && input.checked) ? 'on' : 'off';\n        },\n        bind: function () {\n          var t = this;\n          var inputs = document.querySelectorAll('input[type=\"checkbox\"][aria-label=\"Bake Mode\"], #wakeLockButton');\n          if (inputs && inputs.length) {\n            inputs.forEach(function (input) {\n              input.addEventListener('change', function (evt) {\n                t.send(t.getState(input));\n              });\n            });\n          }\n        },\n        send: function (state) {\n          gtag('event', 'hsy_bake_mode_toggle', { bake_mode_state: state });\n        }\n      },\n      button: {\n        bind: function () {\n          var t = this;\n          document.querySelectorAll('button').forEach(function (button) {\n            button.addEventListener('click', function (evt) {\n              t.send(button, 'hsy_button_click');\n            });\n          });\n        },\n        send: function (button, eventName) {\n          gtag('event', eventName, {\n            click_text: button.innerText.trim() || '(not set)'\n          });\n        }\n      },\n      scroll: {\n        scrolled: [\n          { percent: 50, reached: false }\n        ],\n        // https://stackoverflow.com/a/8028584\n        getPercent: function () {\n          var h = document.documentElement, \n              b = document.body,\n              st = 'scrollTop',\n              sh = 'scrollHeight';\n          return (h[st]||b[st]) / ((h[sh]||b[sh]) - h.clientHeight) * 100;\n        },\n        send: function (pctScrolled) {\n          gtag('event', 'scroll', { percent_scrolled: pctScrolled });\n        },\n        check: function () {\n          var t = this;\n          var pctScrolled = t.getPercent();\n          t.scrolled.forEach(function (obj, idx) {\n            if (pctScrolled >= obj.percent && !obj.reached) {\n              t.scrolled[idx].reached = true;\n              t.send(obj.percent);\n            }\n          });\n        },\n        bind: function () {\n          var t = this;\n          document.addEventListener('scroll', debounce(function () {\n            t.check();\n          }, 250));\n        }\n      },\n      timeOnPage: {\n        durations: [30, 60],\n        send: function (seconds) {\n          var t = this;\n          var idx = t.durations.indexOf(seconds);\n          if (idx > -1) {\n            gtag('event', 'hsy_time_on_page_' + t.durations[idx]);\n          }\n        }\n      },\n      video: {\n        send: function (videoElem, eventName) {\n          if (!videoElem) return;\n          gtag('event', eventName, {\n            video_url: (function (v) {\n              var src = '(not set)';\n              if (v.src) {\n                src = v.src;\n              } else {\n                srcElem = v.querySelector('source[src]');\n                if (srcElem && srcElem.src) {\n                  src = srcElem.src;\n                }\n              }\n              return src;\n            })(videoElem)\n          });\n        }\n      }\n    };\n\n    for (var k in customEvents) {\n      if (customEvents[k].bind) {\n        customEvents[k].bind();\n      }\n    }\n\n    // expose time on page and media events\n    window.JPL_HSY_TRACKING = {\n      sendTimeOnPage: function (seconds) {\n        if (typeof seconds == 'number') {\n          customEvents.timeOnPage.send(seconds);\n        }\n      },\n      sendVideoStart: function (videoElem) {\n        if (videoElem) {\n          customEvents.video.send(videoElem, 'video_start');\n        }\n      }\n    };\n\n  })(window, document, gtag);\n</script>\n");