document.addEventListener('DOMContentLoaded', function() {
    var scrollable = document.querySelectorAll('.cmp-tabs__tablist.tabs-heading');
    let observer = new IntersectionObserver(intersectionObserverCallback, {root: null, threshold: 0.75});

    for(var index = 0; index < scrollable.length; index++){
        var item=scrollable[index];
        observer.observe(item.querySelector(".is-last-tab"));
        /*item.addEventListener('scroll', function (event) {
            scrollTab(event, item);
        });*/
    }

    function intersectionObserverCallback(entries){
        entries.forEach((entry) => {
            if(entry.isIntersecting){
            	entry.target.closest(".cmp-tabs__tablist.tabs-heading").classList.add('scroll-ended');
            } else {
                entry.target.closest(".cmp-tabs__tablist.tabs-heading").classList.remove('scroll-ended');
            }
        });
    }

    /*function scrollTab(e, item) {
        var newScrollLeft = item.scrollLeft;
        var width = calWidth(item);
        var scrollWidth = item.scrollWidth;
        var offset = 8;
        var isLastItemActive = item.querySelectorAll('.is-last-tab[aria-selected="true"]').length;

        if (scrollWidth - newScrollLeft - width < offset || isLastItemActive.length > 0) {
            item.classList.add('scroll-ended');
        } else {
            item.classList.remove('scroll-ended');
        }
    }*/
    function calWidth(object){ 

	    var computedStyle = window.getComputedStyle(object); 

	    var computedWidth = object.offsetWidth - parseInt(window.getComputedStyle(object).getPropertyValue("padding-right"));
        computedWidth -= parseInt(window.getComputedStyle(object).getPropertyValue("padding-left")); 

	    computedWidth-= parseInt(window.getComputedStyle(object).getPropertyValue("border-right")) 

	    computedWidth-= parseInt(window.getComputedStyle(object).getPropertyValue("border-left")); 

	    return computedWidth; 

    }  
});